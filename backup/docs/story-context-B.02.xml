<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>B</epicId>
    <storyId>02</storyId>
    <title>仿真循环：周期性行为生成</title>
    <status>Draft</status>
    <generatedAt>2025-10-08</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/root/aitown-example/docs/stories/story-2.2.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>simulation engine</asA>
    <iWant>implement a periodic behavior generation loop (default 90 seconds) for active NPCs</iWant>
    <soThat>decisions are generated, applied to state, logged in events, and broadcasted via state_update, with local fallback on LLM timeout/failure</soThat>
    <tasks>- Implement simulation loop scheduler (90s interval) (AC: 1)
  - Add configuration for decision interval (default 90s)
  - Schedule periodic tasks for active NPCs
  - Record start/completion times in events
- Integrate LLM adapter for decision generation (AC: 2)
  - Call LLM adapter with NPC context
  - Translate decisions to actions and apply to state
  - Write events and broadcast state_update
- Implement local fallback on failure/timeout (AC: 3)
  - Use 5s timeout for LLM calls
  - On timeout/failure, use local fallback behavior
  - Log local-fallback event
- Add unit tests for simulation loop, adapter integration, event writing
- Add integration tests for end-to-end decision cycle</tasks>
  </story>

  <acceptanceCriteria>1. 系统定期（默认每 90 秒）为活跃 NPC 调度决策生成任务并记录开始/完成时间。
2. 决策生成的结果会在完成后写入事件日志并触发相应 state_update 广播。
3. 在高延迟或失败情况下（例如单次生成超时），系统使用本地回退策略并记录 `local-fallback` 事件。</acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/prd.md" title="PRD" section="FR005" snippet="描述：仿真与 LLM Adapter 的设计应支持 MVP 并发目标 10 个 NPC。对于真实 LLM 调用的高延迟或失败，系统需回退到本地规则或简化行为生成以维持仿真节奏。" />
      <doc path="docs/prd.md" title="PRD" section="FR008" snippet="描述：行为由 LLM Adapter 或回退本地规则生成。行为结果必须：1) 应用到 NPC 内存状态，2) 写入事件日志（便于回放/审计），3) 广播 `state_update`。内存存储应支持 snapshot/versioning。" />
      <doc path="docs/tech-spec-epic-B.md" title="Tech Spec Epic B" section="B-02" snippet="Stories Covered: B-02: 仿真循环：周期性行为生成" />
      <doc path="docs/solution-architecture.md" title="Solution Architecture" section="Component Overview" snippet="Simulation Service (Scheduler + Decision Engine), LLM Adapter (Mock + Real implementations), Event Log & Snapshot Writer" />
    </docs>
    <code>
      <code path="src/services/simClock.ts" kind="service" symbol="SimClock" lines="1-100" reason="Provides timing and scheduling foundation for periodic loops" />
      <code path="src/adapters/mockLLM.ts" kind="adapter" symbol="MockLLMAdapter" lines="1-50" reason="Existing LLM adapter interface and mock implementation for testing" />
      <code path="src/ws/broadcaster.ts" kind="broadcaster" symbol="Broadcaster" lines="1-50" reason="WebSocket broadcasting for state_update events" />
      <code path="src/repos/memoryRepo.ts" kind="repo" symbol="MemoryRepo" lines="1-100" reason="In-memory storage for events and snapshots" />
    </code>
    <dependencies>
      <dependency ecosystem="Node.js" packages="express: ^4.18.2, ws: ^8.13.0, uuid: ^9.0.0, vitest: ^1.0.0" />
    </dependencies>
  </artifacts>

  <constraints>LLM calls must respect a 5s timeout; on timeout use local fallback. Decisions are translated to action functions that mutate NPC state atomically. Persist events to event log for replay and auditing. Event-driven state updates: decisions → events → apply to in-memory state → write snapshot → broadcast state_update.</constraints>
  <interfaces>
    <interface name="LLMAdapter" kind="interface" signature="generateDecision(npcContext: any): Promise<Decision>" path="src/adapters/mockLLM.ts" />
    <interface name="Broadcaster" kind="class" signature="broadcast(event: string, data: any): void" path="src/ws/broadcaster.ts" />
  </interfaces>
  <tests>
    <standards>Use vitest for unit and integration tests, follow existing patterns in tests/unit/ and tests/integration/</standards>
    <locations>tests/unit/, tests/integration/, tests/routes/</locations>
    <ideas>
      <idea ac="1">Test periodic scheduling with fake timers to verify 90s interval</idea>
      <idea ac="2">Mock LLM adapter, verify events written and state_update broadcasted</idea>
      <idea ac="3">Mock LLM timeout, verify local-fallback event logged</idea>
    </ideas>
  </tests>
</story-context>
