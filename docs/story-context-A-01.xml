<?xml version="1.0" encoding="utf-8"?>
<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>A</epicId>
    <storyId>01</storyId>
    <title>设计并验证最小 SQLite schema（Data Models & Repos）</title>
    <status>Done</status>
    <generatedAt>2025-10-09</generatedAt>
    <generator>BMAD Story Context Workflow</generator>
    <sourceStoryPath>/root/aitown-example/docs/stories/story-1.1.md</sourceStoryPath>
  </metadata>

  <story>
    <summary>为 MVP 实现并验证一套最小可用的 SQLite schema，并保证迁移脚本可在内存或临时文件数据库上运行以供 CI/本地快速验证。</summary>
    <tasks>
- [x] 确认并校验 `migrations/0001_init.sql` 包含建议的表、外键与索引
- [x] 编写/核对 `backend/src/aitown/helpers/init_db.py`，支持 path 或 sqlite3.Connection，并可插入 seed 数据
- [x] 新增/更新单元测试 `backend/tests/unit/test_helpers_init_db.py`，在 ":memory:" 上运行迁移并断言表/列存在与种子插入
- [x] 更新 `docs/db.md`，记录字段含义与 JSON 字段约定
    </tasks>
  </story>

  <acceptanceCriteria>
1. `migrations/0001_init.sql` 能在空 SQLite 数据库（包含 ":memory:") 上创建 player、place、road、item、npc、npc_memory、memory_entry、event、transactions 等表，并创建索引与外键约束。
2. `backend/src/aitown/helpers/init_db.py` 接受 sqlite3.Connection 或路径字符串并执行迁移；可选 `seed=True` 时插入最小种子数据（player:seed, place:seed, item:seed）。
3. 在 `backend/tests/unit` 下存在测试(`test_helpers_init_db.py`)能在内存 DB 上运行迁移并验证关键表/列存在与种子数据插入。
4. `docs/db.md` 记录字段含义、JSON 字段约定与示例。
  </acceptanceCriteria>

  <artifacts>
    <docs>
      <doc path="docs/db.md" title="DB schema and conventions" section="" snippet="记录表结构、字段含义，JSON 字段约定（tags、inventory、shop_inventory 存为 JSON 字符串）" />
    </docs>
    <code>
      <code path="migrations/0001_init.sql" kind="migration" symbol="" lines="?" reason="创建所有必需表、外键与索引" />
      <code path="backend/src/aitown/helpers/init_db.py" kind="helper" symbol="init_db" lines="?" reason="初始化数据库，执行 migrations/0001_init.sql 并可插入 seed 数据" />
      <code path="backend/tests/unit/test_helpers_init_db.py" kind="test" symbol="" lines="?" reason="验证 init_db 在 :memory: 上运行并测试异常/种子行为" />
    </code>
  </artifacts>

  <constraints>
- PRAGMA foreign_keys 必须在迁移或连接时显式设置为 ON 以保证 FK 语义一致
- JSON-like 字段在 SQLite 中以 TEXT 存储，应用层负责序列化/反序列化
  </constraints>

  <interfaces>
- init_db(conn_or_path: str|sqlite3.Connection, seed: bool=False) -> sqlite3.Connection
  </interfaces>

  <tests>
    <standards>Use pytest for unit tests; tests located under backend/tests/unit/</standards>
    <locations>backend/tests/unit/</locations>
    <ideas>
- Run init_db(":memory:") and assert tables exist in sqlite_master
- Run init_db(conn_object) and assert connection object is returned unchanged
- Test seed=True inserts player:seed, place:seed, item:seed
    </ideas>
  </tests>
</story-context>
